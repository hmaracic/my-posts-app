{"version":3,"sources":["utils/withLogging.tsx","components/Comment.tsx","components/Post.tsx","components/PostWithComments.tsx","routes/PostPage.tsx","components/search/SearchBar.tsx","components/search/SearchContext.ts","components/search/SearchContainer.tsx","components/search/withSearch.tsx","routes/PostsPage.tsx","model/ApiModels.ts","data/data.tsx","utils/utils.ts","data/WithData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoggingContext","React","createContext","propsMessage","WithLogging","componentName","children","Consumer","loggingContext","console","log","LoggingProvider","Provider","value","withLogging","Component","props","comment","className","name","email","body","post","title","user","CommentsContainer","memo","comments","map","id","split","word","length","toUpperCase","substr","join","content","updateTimeout","updateSearchTerm","state","searchTerm","e","newTerm","target","setState","clearTimeout","setTimeout","this","type","onChange","SearchContext","initialSearchTerm","_","connectedSearchBar","searchContext","key","SearchContainer","initialSeachTerm","newSearchTerm","SearchBar","withSearch","posts","searchTermLC","toLowerCase","filter","indexOf","to","isApiComment","candidate","hasOwnProperty","candidateDict","postId","isApiUser","isApiPost","userId","getUsersMap","fetch","then","response","text","stringUsers","parseResult","JSON","parse","error","Error","Array","isArray","reduce","acc","potentialUser","apiUser","getUser","stringUser","getCommentsForPost","undefined","Promise","reject","stringResponse","parsedComments","commentCandidate","getCommentsMap","stringComments","commentArray","push","numericTester","randomToken","baseValue","Math","round","random","Date","now","WithData","_provideDataToken","provideDataGenerator","provideDataToken","newData","data","dataFunction","dataId","getData","_prevProps","prevState","String","nextProps","WithDataWithProps","withLoadingAndErrorMsg","transformer","App","path","render","provideData","all","parsedPosts","every","usersAndCommentsAndPosts","apiPost","users","match","params","dataIdString","test","parsedPost","postComponents","getPostWithAuthorAndComments","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbfdea83.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface LoggingContextType {\r\n  propsMessage: string;\r\n}\r\n\r\nexport const LoggingContext = React.createContext<LoggingContextType>({\r\n  propsMessage: \"Default logging message:\",\r\n});\r\n\r\n/**\r\n * A component which adds a call to console.log for each (re-)rendering. \r\n * The message format is \"`propsMessage` `componentName`\". `componentName` \r\n * is passed as a prop to the component, while the `propsMessage` is \r\n * retrieved from the `LoggingProvider` which needs to be an ancestor of \r\n * this component. In case no `LoggingProvider` ancestor is available, a \r\n * default `\"Default logging message:\"` is used.\r\n */\r\nexport const WithLogging = ({\r\n  componentName,\r\n  children,\r\n}: {\r\n  componentName: string;\r\n  children: () => React.ReactNode;\r\n}): React.ReactElement | null => {\r\n  return (\r\n    <LoggingContext.Consumer>\r\n      {(loggingContext): React.ReactNode => {\r\n        console.log(`${loggingContext.propsMessage} ${componentName}`);\r\n        return children();\r\n      }}\r\n    </LoggingContext.Consumer>\r\n  );\r\n};\r\n\r\n/**\r\n * A HOC wrapper which adds a call to console.log for each (re-)rendering. \r\n * The message format is \"`propsMessage` `componentName`\". `componentName` \r\n * is passed as the 2nd argument, while the `propsMessage` is retrieved \r\n * from the `LoggingProvider` which needs to be an ancestor of this \r\n * component. In case no `LoggingProvider` ancestor is available, a default \r\n * `\"Default logging message:\"` is used.\r\n */\r\nconst withLogging = <P, S = {}>(\r\n  Component: React.ComponentClass<P, S> | React.FunctionComponent<P>,\r\n  componentName: string\r\n): React.FunctionComponent<P> => (props): React.ReactElement | null => (\r\n  <WithLogging componentName={componentName}>\r\n    {(): React.ReactNode => <Component {...props} />}\r\n  </WithLogging>\r\n);\r\n\r\n/**\r\n * A provider which sets the `propsMessage` component for all the \r\n * descendant `WithLogging` components and `withLogging`-wrapped \r\n * components.\r\n * The message is passed as the `propsMessage` prop.\r\n */\r\nexport const LoggingProvider = ({\r\n  children,\r\n  propsMessage,\r\n}: {\r\n  children: React.ReactNode;\r\n  propsMessage: string;\r\n}): React.ReactElement => (\r\n  <LoggingContext.Provider value={{ propsMessage }}>\r\n    {children}\r\n  </LoggingContext.Provider>\r\n);\r\n\r\nexport default withLogging;\r\n","import React from \"react\";\r\nimport CommentModel from \"../model/CommentModel\";\r\nimport withLogging from \"../utils/withLogging\";\r\nimport \"./Comment.css\";\r\n\r\ninterface CommentProps extends React.HTMLProps<HTMLDivElement> {\r\n  comment: CommentModel;\r\n}\r\n\r\n/**\r\n * Comment display component. Besides the comment model takes in all div props and applies them to the root \r\n * `div` of the component.\r\n */\r\nconst Comment = ({ comment, ...props }: CommentProps): JSX.Element => (\r\n  <div className=\"comment\" {...props}>\r\n    <div className=\"name\">\r\n      <span className=\"label\">Name:</span>\r\n      {comment.name}\r\n    </div>\r\n    <div className=\"email\">\r\n      <span className=\"label\">Email:</span>\r\n      {comment.email}\r\n    </div>\r\n    <div className=\"body\">\r\n      <span className=\"label\">Body:</span>\r\n      {comment.body}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default withLogging(Comment, \"Comment\");\r\n","import React from \"react\";\r\nimport PostModel from \"../model/PostModel\";\r\nimport withLogging from \"../utils/withLogging\";\r\nimport \"./Post.css\";\r\n\r\ninterface PostProps extends React.HTMLProps<HTMLDivElement> {\r\n  post: PostModel;\r\n}\r\n\r\n/**\r\n * Post display component. Besides the post model takes in all div props and applies them to the root \r\n * `div` of the component.\r\n */\r\nconst Post = ({ post, ...props }: PostProps): JSX.Element => (\r\n  <div className=\"post\" {...props}>\r\n    <div className=\"title\">\r\n      <span className=\"label\">Title:</span>\r\n      {post.title}\r\n    </div>\r\n    <div className=\"name\">\r\n      <span className=\"label\">Name:</span>\r\n      {post.user?.name}\r\n    </div>\r\n    <div className=\"body\">\r\n      <span className=\"label\">Body:</span>\r\n      {post.body}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default withLogging(Post, \"Post\");\r\n","import React, { memo } from \"react\";\r\nimport CommentModel from \"../model/CommentModel\";\r\nimport PostModel from \"../model/PostModel\";\r\nimport withLogging from \"../utils/withLogging\";\r\nimport Comment from \"./Comment\";\r\nimport Post from \"./Post\";\r\nimport \"./PostWithComments.css\";\r\n\r\nexport interface PostWithCommentsProps extends React.HTMLProps<HTMLDivElement> {\r\n  post: PostModel;\r\n}\r\n\r\ninterface CommentsContainerProps extends React.HTMLProps<HTMLDivElement> {\r\n  comments: Array<CommentModel>;\r\n}\r\n\r\n// memoized to prevent re-rendering if no input props change on the parent\r\nconst CommentsContainer = memo(\r\n  ({ comments, ...props }: CommentsContainerProps): React.ReactElement => (\r\n    <div className=\"comments-container\" {...props}>\r\n      {comments.map((comment) => (\r\n        <Comment key={comment.id} comment={comment} />\r\n      ))}\r\n    </div>\r\n  )\r\n);\r\n\r\n/**\r\n * Composite component which displays a post and all its comments\r\n */\r\nconst PostWithComments: React.FC<PostWithCommentsProps> = ({\r\n  post,\r\n  ...props\r\n}): React.ReactElement => (\r\n  <div className=\"post-comments-ctr\" {...props}>\r\n    <Post post={post} />\r\n    {(post.comments && <CommentsContainer comments={post.comments} />) ?? \"\"}\r\n  </div>\r\n);\r\n\r\nexport default withLogging(PostWithComments, \"PostWithComments\");\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport PostModel from \"../model/PostModel\";\r\nimport PostWithComments from \"../components/PostWithComments\";\r\nimport withLogging from \"../utils/withLogging\";\r\n\r\ninterface PostPageProps extends React.HTMLProps<HTMLDivElement> {\r\n  post: PostModel;\r\n}\r\n\r\n/**\r\n * The page for the single-post route.\r\n */\r\nconst PostPage = ({\r\n  post,\r\n  ...props\r\n}: PostPageProps): React.ReactElement | null => (\r\n  <div className=\"post-page\" {...props}>\r\n    <Helmet>\r\n      <title>\r\n        {`${post.title\r\n          .split(\" \")\r\n          .map((word) =>\r\n            word.length > 1\r\n              ? word[0].toUpperCase() + word.substr(1)\r\n              : word.length === 0\r\n              ? word\r\n              : word.toUpperCase()\r\n          )\r\n          .join(\" \")} - ${post.user?.name ?? \"\"} - My Posts`}\r\n      </title>\r\n      <meta name=\"description\" content=\"List of all posts with comments\" />\r\n    </Helmet>\r\n    <PostWithComments post={post} />\r\n  </div>\r\n);\r\n\r\nexport default withLogging(PostPage, \"PostPage\");\r\n","import React from \"react\";\r\nimport withLogging from \"../../utils/withLogging\";\r\nimport \"./SearchBar.css\";\r\n\r\ninterface SearchBarProps extends React.HTMLProps<HTMLDivElement> {\r\n  searchTerm: string;\r\n  updateSearchTerm: (newSearchTerm: string) => void;\r\n}\r\n\r\ninterface SearchBarState {\r\n  searchTerm: string;\r\n}\r\n\r\n/**\r\n * Search bar which takes in two props, `searchTerm` and `updateSearchTerm`.\r\n * `searchTerm` is used only to set the initial value before mounting the component\r\n * i.e. when the filter already has a value before navigating to the page.\r\n * Changes to `searchTerm` after the compnent has been mounted will be ignored.\r\n * To change the displayed search term a `key` on the component can be used to replace\r\n * it with a new instance (which will then load its initial value from the prop).\r\n */\r\nclass SearchBar extends React.Component<SearchBarProps, SearchBarState> {\r\n  updateTimeout?: NodeJS.Timeout;\r\n  updateSearchTerm: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n\r\n  constructor(props: SearchBarProps) {\r\n    super(props);\r\n    this.state = {\r\n      //set search term to initial value\r\n      searchTerm: this.props.searchTerm,\r\n    };\r\n    this.updateSearchTerm = (e): void => {\r\n      const newTerm = e.target.value;\r\n      //immediately set new value to reflect input in the element\r\n      this.setState({ searchTerm: newTerm });\r\n\r\n      //clear pending global search term updates in case of new input change\r\n      if (this.updateTimeout != null) {\r\n        clearTimeout(this.updateTimeout);\r\n      }\r\n      //wait 0.5s before updating globally in case user changes input\r\n      this.updateTimeout = setTimeout(() => {\r\n        this.props.updateSearchTerm(newTerm);\r\n        delete this.updateTimeout;\r\n      }, 500);\r\n    };\r\n  }\r\n\r\n  render(): React.ReactElement {\r\n    const { searchTerm } = this.state;\r\n    const { searchTerm: _, updateSearchTerm: __, ...props } = this.props;\r\n    return (\r\n      <div className=\"search-bar\" {...props}>\r\n        <span className=\"label\">Search by author name:</span>\r\n        <input\r\n          name=\"search-term-input\"\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={this.updateSearchTerm}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withLogging(SearchBar, \"SearchBar\");\r\n","import React from 'react'\r\n\r\nexport interface SearchContextType {\r\n    searchTerm: string;\r\n    initialSearchTerm: string;\r\n    updateSearchTerm: (newSearchTerm: string) => void;\r\n}\r\n\r\nconst SearchContext = React.createContext<SearchContextType>({\r\n    searchTerm: \"\",\r\n    initialSearchTerm: \"\",\r\n    updateSearchTerm: (_) => { },\r\n});\r\n\r\nexport default SearchContext;","import React from \"react\";\r\nimport withLogging from \"../../utils/withLogging\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SearchContext from \"./SearchContext\";\r\n\r\ninterface SearchContainerProps {\r\n  children: React.ReactNode;\r\n  initialSeachTerm?: string;\r\n}\r\n\r\ninterface SearchContainerState {\r\n  searchTerm: string;\r\n  updateSearchTerm: (newSearchTerm: string) => void;\r\n}\r\n\r\n/**\r\n * Search bar which needs to be a descendant of `SearchContainer`\r\n */\r\nconst connectedSearchBar = (\r\n  props: React.HTMLAttributes<HTMLDivElement>\r\n): React.ReactElement => (\r\n  <SearchContext.Consumer>\r\n    {(searchContext): React.ReactElement => (\r\n      <SearchBar\r\n        {...props}\r\n        key={searchContext.initialSearchTerm}\r\n        searchTerm={searchContext.searchTerm}\r\n        updateSearchTerm={searchContext.updateSearchTerm}\r\n      />\r\n    )}\r\n  </SearchContext.Consumer>\r\n);\r\n\r\n/**\r\n * Container to encapsulate `SearchBar` and `withSearch`-wrapped components with.\r\n * Supports setting the initial search term using the `initialSearchTerm` prop.\r\n */\r\nclass SearchContainer extends React.Component<\r\n  SearchContainerProps,\r\n  SearchContainerState\r\n> {\r\n  static SearchBar = connectedSearchBar;\r\n\r\n  constructor(props: SearchContainerProps) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: props.initialSeachTerm ?? \"\",\r\n      updateSearchTerm: (newSearchTerm): void => {\r\n        this.setState({ searchTerm: newSearchTerm });\r\n      },\r\n    };\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <SearchContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          initialSearchTerm: this.props.initialSeachTerm ?? \"\",\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </SearchContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withLogging<SearchContainerProps>(\r\n  SearchContainer,\r\n  \"SearchContainer\"\r\n);\r\n\r\nexport { connectedSearchBar as SearchBar };\r\n","import React from \"react\";\r\nimport SearchContext from \"./SearchContext\";\r\n\r\nexport interface InjectedSearchProps {\r\n  searchTerm: string;\r\n}\r\n\r\n/** Injects current search term into the wrapped component. Must be a descendant of a `SearchContainer` */\r\nconst withSearch = <P extends InjectedSearchProps>(\r\n  Component: React.ComponentType<P>\r\n): React.ComponentClass<Omit<P, keyof InjectedSearchProps>> =>\r\n  class WithSearch extends React.Component<Omit<P, keyof InjectedSearchProps>> {\r\n    render(): React.ReactNode {\r\n      return (\r\n        <SearchContext.Consumer>\r\n          {(searchContext): React.ReactNode => (\r\n            <Component\r\n              {...(this.props as P)}\r\n              searchTerm={searchContext.searchTerm}\r\n            />\r\n          )}\r\n        </SearchContext.Consumer>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default withSearch;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PostModel from \"../model/PostModel\";\r\nimport PostWithComments from \"../components/PostWithComments\";\r\nimport { SearchBar } from \"../components/search/SearchContainer\";\r\nimport withSearch, {\r\n  InjectedSearchProps,\r\n} from \"../components/search/withSearch\";\r\nimport withLogging from \"../utils/withLogging\";\r\nimport \"./PostsPage.css\";\r\n\r\ninterface PostsPageProps\r\n  extends React.HTMLProps<HTMLDivElement>,\r\n    InjectedSearchProps {\r\n  posts: PostModel[];\r\n}\r\n\r\n/**\r\n * The page for the all-posts route.\r\n */\r\nexport class PostsPage extends React.Component<PostsPageProps> {\r\n  render(): React.ReactNode {\r\n    const { posts, searchTerm, ...props } = this.props;\r\n    const searchTermLC = searchTerm.toLowerCase();\r\n    return (\r\n      <div className=\"posts-page\" {...props}>\r\n        <Helmet>\r\n          <title>All Posts - My Posts</title>\r\n          <meta name=\"description\" content=\"List of all posts with comments\" />\r\n        </Helmet>\r\n        <SearchBar />\r\n\r\n        {posts\r\n          // keep only posts which satisfy current search term criteria\r\n          // search term is case-insensitive\r\n          .filter((post) =>\r\n            searchTermLC === \"\" || post.user?.name == null\r\n              ? true\r\n              : post.user.name.toLowerCase()?.indexOf(searchTermLC) > -1\r\n          )\r\n          .map((post) => (\r\n            <Link\r\n              key={post.id}\r\n              className={\"post-link\"}\r\n              to={`../post/${post.id}`}\r\n            >\r\n              <PostWithComments post={post} />\r\n            </Link>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withLogging(withSearch(PostsPage), \"PostsPage\");\r\n","// contains type definitions and type guards for JSON responses received from the API\r\n\r\nexport type ApiComment = {\r\n    postId: number;\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n    body: string;\r\n}\r\n\r\n/**\r\n * Type guard for **ApiComment** which checks whether the object has all required properties and whether they're of the expected type\r\n * @param candidate object to be checked for conformance\r\n */\r\nexport const isApiComment = (candidate: unknown): candidate is ApiComment => {\r\n    if (typeof candidate !== \"object\" || candidate === null) return false;\r\n    if (!candidate.hasOwnProperty(\"postId\")) return false;\r\n    if (!candidate.hasOwnProperty(\"id\")) return false;\r\n    if (!candidate.hasOwnProperty(\"name\")) return false;\r\n    if (!candidate.hasOwnProperty(\"email\")) return false;\r\n    if (!candidate.hasOwnProperty(\"body\")) return false;\r\n    const candidateDict = candidate as { postId: unknown, id: unknown, name: unknown, email: unknown, body: unknown };\r\n    if (typeof candidateDict.postId !== \"number\" || candidateDict.postId == null) return false;\r\n    if (typeof candidateDict.id !== \"number\" || candidateDict.id == null) return false;\r\n    if (typeof candidateDict.name !== \"string\" || candidateDict.name == null) return false;\r\n    if (typeof candidateDict.email !== \"string\" || candidateDict.email == null) return false;\r\n    if (typeof candidateDict.body !== \"string\" || candidateDict.body == null) return false;\r\n    return true;\r\n}\r\n\r\nexport type ApiUser = {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\n/**\r\n * Type guard for **ApiUser** which checks whether the object has all required properties and whether they're of the expected type.\r\n * We check only for properties which are later used by us i.e. it's not an exhaustive check.\r\n * @param candidate object to be checked for conformance\r\n */\r\nexport const isApiUser = (candidate: unknown): candidate is ApiUser => {\r\n    if (typeof candidate !== \"object\" || candidate === null) return false;\r\n    if (!candidate.hasOwnProperty(\"id\")) return false;\r\n    if (!candidate.hasOwnProperty(\"name\")) return false;\r\n    const candidateDict = candidate as { id: unknown, name: unknown };\r\n    if (typeof candidateDict.id !== \"number\" || candidateDict.id == null) return false;\r\n    if (typeof candidateDict.name !== \"string\" || candidateDict.name == null) return false;\r\n    return true;\r\n}\r\n\r\nexport type ApiPost = {\r\n    userId: number;\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n}\r\n\r\n/**\r\n * Type guard for **ApiPost** which checks whether the object has all required properties and whether they're of the expected type\r\n * @param candidate object to be checked for conformance\r\n */\r\nexport const isApiPost = (candidate: unknown): candidate is ApiPost => {\r\n    if (typeof candidate !== \"object\" || candidate === null) return false;\r\n    if (!candidate.hasOwnProperty(\"userId\")) return false;\r\n    if (!candidate.hasOwnProperty(\"id\")) return false;\r\n    if (!candidate.hasOwnProperty(\"title\")) return false;\r\n    if (!candidate.hasOwnProperty(\"body\")) return false;\r\n    const candidateDict = candidate as { userId: unknown, id: unknown, title: unknown, body: unknown };\r\n    if (typeof candidateDict.userId !== \"number\" || candidateDict.userId == null) return false;\r\n    if (typeof candidateDict.id !== \"number\" || candidateDict.id == null) return false;\r\n    if (typeof candidateDict.title !== \"string\" || candidateDict.title == null) return false;\r\n    if (typeof candidateDict.body !== \"string\" || candidateDict.body == null) return false;\r\n    return true;\r\n}","import {\r\n  ApiPost,\r\n  ApiUser,\r\n  isApiComment,\r\n  isApiPost,\r\n  isApiUser,\r\n} from \"../model/ApiModels\";\r\nimport CommentModel from \"../model/CommentModel\";\r\nimport PostModel from \"../model/PostModel\";\r\nimport UserModel from \"../model/UserModel\";\r\n\r\ntype UserModelMap = { [key: number]: UserModel };\r\ntype CommentModelMap = { [key: number]: Array<CommentModel> };\r\n\r\nexport const getPostsWithAuthorAndComments = (): Promise<Array<PostModel>> =>\r\n  // since they're independent start all fetch requests in parallel (if interpreter supports)\r\n  // and wait for all three results (including dependent per-fetch processing) before merging\r\n  Promise.all([\r\n    getUsersMap(),\r\n    getCommentsMap(),\r\n    fetch(`https://jsonplaceholder.typicode.com/posts`)\r\n      .then((response) => response.text())\r\n      .then((stringResponse) => {\r\n        let parsedPosts;\r\n        try {\r\n          parsedPosts = JSON.parse(stringResponse);\r\n        } catch (error) {\r\n          throw new Error(\"Unexpected data received from posts endpoint\");\r\n        }\r\n\r\n        if (!Array.isArray(parsedPosts) || !parsedPosts.every(isApiPost)) {\r\n          throw new Error(\"Unexpected data received from posts endpoint\");\r\n        }\r\n\r\n        const apiPosts = parsedPosts as Array<ApiPost>;\r\n        return apiPosts;\r\n      }),\r\n  ]).then((usersAndCommentsAndPosts) => {\r\n    const apiPosts = usersAndCommentsAndPosts[2];\r\n    return apiPosts.map((apiPost) => {\r\n      const users = usersAndCommentsAndPosts[0];\r\n      const comments = usersAndCommentsAndPosts[1];\r\n      const user = users[apiPost.userId];\r\n      if (!user) {\r\n        throw new Error(\"Couldn't retrieve user for post\");\r\n      }\r\n\r\n      return {\r\n        id: apiPost.id,\r\n        title: apiPost.title,\r\n        body: apiPost.body,\r\n        comments: comments[apiPost.id] ?? [],\r\n        user,\r\n      };\r\n    });\r\n  });\r\n\r\nexport const getPostWithAuthorAndComments = (\r\n  postId: number\r\n): Promise<PostModel> =>\r\n  // get only the post and its comments in parallel since we need the post\r\n  // to find out the userId and get the user\r\n  Promise.all([\r\n    fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`)\r\n      .then((response) => response.text())\r\n      .then((stringResponse) => {\r\n        let parsedPost;\r\n        try {\r\n          parsedPost = JSON.parse(stringResponse);\r\n        } catch (error) {\r\n          throw new Error(\"Unexpected data received from post endpoint\");\r\n        }\r\n        if (!isApiPost(parsedPost)) {\r\n          throw new Error(\"Unexpected data received from post endpoint\");\r\n        }\r\n        const apiPost = parsedPost as ApiPost;\r\n        return Promise.all([apiPost, getUser(apiPost.userId)]);\r\n      }),\r\n    getCommentsForPost(postId),\r\n  ]).then((postComponents) => {\r\n    const apiPost = postComponents[0][0];\r\n    const user = postComponents[0][1];\r\n    const comments = postComponents[1];\r\n\r\n    return {\r\n      id: apiPost.id,\r\n      title: apiPost.title,\r\n      body: apiPost.body,\r\n      comments,\r\n      user,\r\n    };\r\n  });\r\n\r\n/**\r\n * Returns users as a map of users with user id as the map key\r\n */\r\nconst getUsersMap = (): Promise<UserModelMap> =>\r\n  fetch(`https://jsonplaceholder.typicode.com/users`)\r\n    .then((response) => response.text())\r\n    .then((stringUsers) => {\r\n      let parseResult;\r\n      try {\r\n        parseResult = JSON.parse(stringUsers);\r\n      } catch (error) {\r\n        throw new Error(\"Unexpected data received from users endpoint\");\r\n      }\r\n      if (!Array.isArray(parseResult)) {\r\n        throw new Error(\"Expected users endpoint to return an array\");\r\n      }\r\n      return (parseResult as Array<unknown>).reduce<UserModelMap>(\r\n        (acc, potentialUser) => {\r\n          if (!isApiUser(potentialUser)) {\r\n            throw new Error(\"Unexpected data received from users endpoint\");\r\n          }\r\n          const apiUser = potentialUser as ApiUser;\r\n          acc[apiUser.id] = { id: apiUser.id, name: apiUser.name };\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n    });\r\n\r\nconst getUser = (userId: number): Promise<UserModel> =>\r\n  fetch(`https://jsonplaceholder.typicode.com/users/${userId}`)\r\n    .then((response) => response.text())\r\n    .then((stringUser) => {\r\n      let parseResult;\r\n      try {\r\n        parseResult = JSON.parse(stringUser);\r\n      } catch (error) {\r\n        new Error(\"Unexpected data received from user endpoint\");\r\n      }\r\n      if (!isApiUser(parseResult)) {\r\n        throw new Error(\"Unexpected data received from user endpoint\");\r\n      }\r\n      const apiUser = parseResult as ApiUser;\r\n      return { id: apiUser.id, name: apiUser.name };\r\n    });\r\n\r\nexport const getCommentsForPost = (\r\n  postId: number\r\n): Promise<Array<CommentModel>> => {\r\n  if (postId === undefined || postId === null) {\r\n    return Promise.reject(new Error(\"PostId must be provided\"));\r\n  }\r\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`)\r\n    .then((response) => response.text())\r\n    .then((stringResponse) => {\r\n      let parsedComments;\r\n      try {\r\n        parsedComments = JSON.parse(stringResponse);\r\n      } catch (error) {\r\n        throw new Error(\"Unexpected data received from comment endpoint\");\r\n      }\r\n\r\n      if (!Array.isArray(parsedComments)) {\r\n        throw new Error(\"Expected comments endpoint to return an array\");\r\n      }\r\n\r\n      return (parsedComments as Array<unknown>).map<CommentModel>(\r\n        (commentCandidate) => {\r\n          if (!isApiComment(commentCandidate)) {\r\n            throw new Error(\"Unexpected data received from comment endpoint\");\r\n          }\r\n\r\n          if (commentCandidate.postId !== postId) {\r\n            throw new Error(\r\n              \"Expected candidate postId to equal requested postId\"\r\n            );\r\n          }\r\n\r\n          return {\r\n            id: commentCandidate.id,\r\n            name: commentCandidate.name,\r\n            email: commentCandidate.email,\r\n            body: commentCandidate.body,\r\n          };\r\n        }\r\n      );\r\n    });\r\n};\r\n\r\n/**\r\n * Returns comments as a map of comment arrays with parent postId as the map key\r\n */\r\nconst getCommentsMap = (): Promise<CommentModelMap> =>\r\n  fetch(`https://jsonplaceholder.typicode.com/comments`)\r\n    .then((response) => response.text())\r\n    .then((stringComments) => {\r\n      const parseResult = JSON.parse(stringComments);\r\n      if (!Array.isArray(parseResult)) {\r\n        throw new Error(\"Expected comments endpoint to return an array\");\r\n      }\r\n      return (parseResult as Array<unknown>).reduce<CommentModelMap>(\r\n        (acc, commentCandidate) => {\r\n          if (!isApiComment(commentCandidate)) {\r\n            throw new Error(\"Unexpected data received from comment endpoint\");\r\n          }\r\n\r\n          const commentArray = acc[commentCandidate.postId] ?? [];\r\n          commentArray.push({\r\n            id: commentCandidate.id,\r\n            name: commentCandidate.name,\r\n            email: commentCandidate.email,\r\n            body: commentCandidate.body,\r\n          });\r\n          acc[commentCandidate.postId] = commentArray;\r\n\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n    });\r\n","\r\nconst numericTester = /^[1-9][0-9]*$/;\r\n/**\r\n * Test if the function parameter starts with digit `[1-9]` followed by any number of `[0-9]` digits\r\n * @param  value the string to test\r\n */\r\nexport const isNumeric = (value: string): boolean => {\r\n    return numericTester.test(value);\r\n}\r\n\r\n/**\r\n * Generate a random token in the `\"rndPart|millis|baseValue\"` format, where `rndPart` is a random number [0,100000], \r\n * `millis` the current time in milliseconds and `baseValue` a user-provided value.\r\n * @param baseValue value to append to the randomly generated string\r\n */\r\nexport const randomToken = (baseValue?: string): string => `${Math.round(Math.random() * 100000)}|${Date.now()}|${baseValue ?? \"\"}`;","import React from \"react\";\r\nimport { randomToken } from \"../utils/utils\";\r\nimport { WithLogging } from \"../utils/withLogging\";\r\n\r\nexport type DataFunctionType<DataType, DataIdType> = (\r\n  provideData: (newData: DataType) => void,\r\n  dataId: DataIdType\r\n) => void;\r\n\r\nexport type WithDataProps<DataType, DataIdType = undefined> = {\r\n  dataId: DataIdType;\r\n  dataFunction: DataFunctionType<DataType, DataIdType>;\r\n  children: (data: DataType | null) => React.ReactNode;\r\n};\r\n\r\ntype WithDataState<DataType, DataIdType = undefined> = {\r\n  data: DataType | null;\r\n  dataFunction: DataFunctionType<DataType, DataIdType>;\r\n  dataId: DataIdType;\r\n};\r\n\r\n/**\r\n * Configurable data provider. Takes two props, `dataId` and `dataFunction`.\r\n * `dataFunction` is a function which is called to get data after the component\r\n * mounts, after the `dataId` prop changes and after the `dataFunction` function\r\n * itself changes.\r\n * Data is provided as the only parameter of a function which needs to be either\r\n * passed as the `children` prop or as the child element.\r\n * Value provided to the `children` function is either the data provided by the\r\n * `dataFunction` or `null` before the (new) data has been received.\r\n */\r\nclass WithData<DataType, DataIdType = undefined> extends React.Component<\r\n  WithDataProps<DataType, DataIdType>,\r\n  WithDataState<DataType, DataIdType>\r\n> {\r\n  _provideDataToken?: string;\r\n\r\n  constructor(props: WithDataProps<DataType, DataIdType>) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: null,\r\n      dataFunction: props.dataFunction,\r\n      dataId: props.dataId,\r\n    };\r\n  }\r\n\r\n  // `provideData` function is generated on every call to append a token check\r\n  // this prevents an old, long-running function call from updating the data\r\n  // if a new data change has already been initiated or if the component is\r\n  // being unmounted (since `setState` must not be call on unmounted components)\r\n  provideDataGenerator: (\r\n    provideDataToken: string\r\n  ) => (newData: DataType) => void = (provideDataToken) => {\r\n    return (newData): void => {\r\n      if (provideDataToken === this._provideDataToken) {\r\n        this.setState({ data: newData });\r\n        this._provideDataToken = undefined;\r\n      }\r\n    };\r\n  };\r\n\r\n  // qualifying conditions for data change are checked here instead of\r\n  // in `onComponentUpdate` to prevent an initial render of old state\r\n  // after the conditions change if the component is already mounted\r\n  // but hidden/out of focus (e.g. using CSS) when the change occurs\r\n  static getDerivedStateFromProps<DataType, DataIdType = undefined>(\r\n    nextProps: WithDataProps<DataType, DataIdType>,\r\n    prevState: WithDataState<DataType, DataIdType>\r\n  ): Partial<WithDataState<DataType, DataIdType>> | null {\r\n    if (\r\n      nextProps.dataId !== prevState.dataId ||\r\n      nextProps.dataFunction !== prevState.dataFunction\r\n    ) {\r\n      return {\r\n        data: null,\r\n        dataId: nextProps.dataId,\r\n        dataFunction: nextProps.dataFunction,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    this.getData(this.props.dataId);\r\n  }\r\n\r\n  componentDidUpdate?(\r\n    _prevProps: WithDataProps<DataType, DataIdType>,\r\n    prevState: WithDataState<DataType, DataIdType>\r\n  ): void {\r\n    if (\r\n      this.state.dataId !== prevState.dataId ||\r\n      this.state.dataFunction !== prevState.dataFunction\r\n    ) {\r\n      this.getData(this.props.dataId);\r\n    }\r\n  }\r\n\r\n  getData(dataId: DataIdType): void {\r\n    // invalidate the old `provideData` token before starting\r\n    // a new data request\r\n    this._provideDataToken = randomToken(String(dataId));\r\n    this.props.dataFunction(\r\n      this.provideDataGenerator(this._provideDataToken),\r\n      dataId\r\n    );\r\n  }\r\n\r\n  componentWillUnmount(): void {\r\n    // invalidate `provideData` token when unmounting to\r\n    // disable state update attempts after the component\r\n    // has been unmounted.\r\n    this._provideDataToken = randomToken(\"unmounting\");\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    if (typeof this.props.children === \"function\")\r\n      return this.props.children(this.state.data);\r\n    return null;\r\n  }\r\n}\r\n\r\n// exported this way because using `withLogging` as a HOC\r\n// creates TS problems with passing generics for `DataType`\r\n// and `DataIdType` to `WithData`\r\nconst WithDataWithProps = <DataType, DataIdType = undefined>(\r\n  props: WithDataProps<DataType, DataIdType>\r\n): React.ReactElement => {\r\n  return (\r\n    <WithLogging componentName={\"withData\"}>\r\n      {(): React.ReactNode => <WithData<DataType, DataIdType> {...props} />}\r\n    </WithLogging>\r\n  );\r\n};\r\nexport default WithDataWithProps;\r\n","import React from \"react\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect,\n  RouteProps,\n  RouteComponentProps,\n} from \"react-router-dom\";\nimport PostModel from \"./model/PostModel\";\nimport PostPage from \"./routes/PostPage\";\nimport PostsPage from \"./routes/PostsPage\";\nimport SearchContainer from \"./components/search/SearchContainer\";\nimport {\n  getPostsWithAuthorAndComments,\n  getPostWithAuthorAndComments,\n} from \"./data/data\";\nimport { isNumeric } from \"./utils/utils\";\nimport WithData from \"./data/WithData\";\nimport { LoggingProvider } from \"./utils/withLogging\";\n\ninterface PostRouteComponentProps extends RouteProps {\n  render: (props: RouteComponentProps<{ postId: string }>) => React.ReactNode;\n}\n\ninterface FetchSuccess<DataType> {\n  type: \"success\";\n  data: DataType;\n}\n\ninterface FetchError {\n  type: \"error\";\n  error: string;\n}\n\ntype FetchResponse<DataType> = FetchSuccess<DataType> | FetchError;\n\nconst withLoadingAndErrorMsg = <DataType extends unknown>(\n  data: FetchResponse<DataType> | null,\n  transformer: (val: DataType) => React.ReactNode | React.ReactNode[]\n): React.ReactNode | React.ReactNode[] =>\n  (data &&\n    (data.type === \"error\"\n      ? data.error\n      : data.data && transformer(data.data))) ??\n  \"Loading...\";\n\nfunction App(): React.ReactElement {\n  return (\n    <LoggingProvider propsMessage=\"Hello from\">\n      <BrowserRouter>\n        <SearchContainer>\n          <HelmetProvider>\n            <div className=\"App\">\n              <Switch>\n                <Route\n                  path=\"/posts\"\n                  render={(_): React.ReactNode => (\n                    <WithData<FetchResponse<Array<PostModel>>>\n                      dataId={undefined}\n                      dataFunction={(provideData): void => {\n                        getPostsWithAuthorAndComments().then(\n                          (posts) =>\n                            provideData({ type: \"success\", data: posts }),\n                          (_) =>\n                            provideData({\n                              type: \"error\",\n                              error: \"Error retrieving posts\",\n                            })\n                        );\n                      }}\n                    >\n                      {(data): React.ReactNode => {\n                        return withLoadingAndErrorMsg(data, (posts) => (\n                          <PostsPage posts={posts} />\n                        ));\n                      }}\n                    </WithData>\n                  )}\n                />\n                <Route<PostRouteComponentProps>\n                  path=\"/post/:postId\"\n                  render={({\n                    match: {\n                      params: { postId },\n                    },\n                  }): React.ReactNode => (\n                    <WithData<FetchResponse<PostModel>, string>\n                      dataId={postId}\n                      dataFunction={(provideData, dataIdString): void => {\n                        if (!isNumeric(dataIdString)) {\n                          provideData({\n                            type: \"error\",\n                            error: \"Invalid post number\",\n                          });\n                          return;\n                        }\n                        const postId = parseInt(dataIdString);\n                        getPostWithAuthorAndComments(postId).then(\n                          (post) =>\n                            provideData({ type: \"success\", data: post }),\n                          (_) =>\n                            provideData({\n                              type: \"error\",\n                              error: \"Error retrieving the requested post\",\n                            })\n                        );\n                      }}\n                    >\n                      {(data): React.ReactNode => {\n                        return withLoadingAndErrorMsg(data, (post) => (\n                          <PostPage post={post} />\n                        ));\n                      }}\n                    </WithData>\n                  )}\n                />\n                <Route>\n                  <Redirect to=\"/posts\" />\n                </Route>\n              </Switch>\n            </div>\n          </HelmetProvider>\n        </SearchContainer>\n      </BrowserRouter>\n    </LoggingProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) : void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}